openapi: 3.0.3
info:
  title: OptiFrontier Market Data Service API
  version: 1.0.0
  description: REST API for normalized equity prices, factors, corporate actions, and ingestion job control.
servers:
  - url: https://api.optifrontier.example.com
    description: Production
  - url: https://staging.optifrontier.example.com
    description: Staging
security:
  - bearerAuth: []
tags:
  - name: Prices
  - name: Factors
  - name: CorporateActions
  - name: IngestionJobs
paths:
  /prices:
    get:
      tags:
        - Prices
      summary: Get price time series
      description: Returns price data for requested tickers over the specified date window.
      parameters:
        - name: tickers
          in: query
          description: Comma-separated list of tickers (max 25).
          schema:
            type: string
        - name: startDate
          in: query
          description: Inclusive start date (ISO 8601).
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Inclusive end date (ISO 8601). Defaults to today.
          schema:
            type: string
            format: date
        - name: vendor
          in: query
          description: Optional vendor filter (spdj, polygon, iex).
          schema:
            type: string
      responses:
        '200':
          description: Price series payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceSeriesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /prices/latest:
    get:
      tags:
        - Prices
      summary: Get latest price snapshot
      responses:
        '200':
          description: Latest snapshot with price rows.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LatestPriceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /factors:
    get:
      tags:
        - Factors
      summary: Get factor exposures
      parameters:
        - name: tickers
          in: query
          schema:
            type: string
          description: Comma-separated tickers.
        - name: factor
          in: query
          schema:
            type: string
          description: Factor name filter (e.g., MOM, SIZE).
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Factor series
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactorSeriesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /corporate-actions:
    get:
      tags:
        - CorporateActions
      summary: List corporate actions
      parameters:
        - name: tickers
          in: query
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: eventType
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Corporate action list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateActionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /ingestions/jobs:
    post:
      tags:
        - IngestionJobs
      summary: Trigger ingestion job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionJobRequest'
      responses:
        '202':
          description: Job accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionJobResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalError'
  /ingestions/jobs/{jobId}:
    get:
      tags:
        - IngestionJobs
      summary: Get ingestion job status
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionJobResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PriceSeriesResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PricePoint'
        snapshotId:
          type: string
          format: uuid
        asOfDate:
          type: string
          format: date
        vendor:
          type: string
        publishedAt:
          type: string
          format: date-time
    PricePoint:
      type: object
      required:
        - ticker
        - mic
        - close
      properties:
        ticker:
          type: string
        mic:
          type: string
        open:
          type: number
          format: double
          nullable: true
        high:
          type: number
          format: double
          nullable: true
        low:
          type: number
          format: double
          nullable: true
        close:
          type: number
          format: double
        volume:
          type: number
          format: double
          nullable: true
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
    LatestPriceResponse:
      allOf:
        - $ref: '#/components/schemas/PriceSeriesResponse'
    FactorSeriesResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/FactorPoint'
    FactorPoint:
      type: object
      required:
        - ticker
        - factorName
        - value
        - asOfDate
      properties:
        ticker:
          type: string
        factorName:
          type: string
        value:
          type: number
          format: double
        asOfDate:
          type: string
          format: date
    CorporateActionResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CorporateAction'
    CorporateAction:
      type: object
      required:
        - eventId
        - ticker
        - eventType
        - effectiveDate
      properties:
        eventId:
          type: string
          format: uuid
        ticker:
          type: string
        eventType:
          type: string
        effectiveDate:
          type: string
          format: date
        details:
          type: object
          additionalProperties: true
    IngestionJobRequest:
      type: object
      properties:
        source:
          type: string
          enum:
            - spdj
            - polygon
            - iex
            - replay
        effectiveDate:
          type: string
          format: date
        force:
          type: boolean
          default: false
      additionalProperties: false
    IngestionJobResponse:
      type: object
      required:
        - jobId
        - status
        - requestedAt
      properties:
        jobId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - queued
            - running
            - succeeded
            - failed
        requestedAt:
          type: string
          format: date-time
        effectiveDate:
          type: string
          format: date
          nullable: true
        source:
          type: string
          nullable: true
        queueEventId:
          type: string
          nullable: true
        errorCode:
          type: string
          nullable: true
        errorMessage:
          type: string
          nullable: true
  responses:
    BadRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Caller lacks permission.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Duplicate job.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TooManyRequests:
      description: Throttled.
      headers:
        Retry-After:
          description: Backoff hint in seconds or HTTP date.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
