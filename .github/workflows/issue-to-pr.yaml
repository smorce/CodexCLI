name: Issue to PR with Codex

on:
  workflow_dispatch: {}
  issues:
    types: [labeled]

permissions:
  contents: write          # push/branch作成に必要
  pull-requests: write     # PRの作成に必要
  issues: write            # ← 追加

jobs:
  fix_with_codex:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.label && github.event.label.name == 'codex') }} # 手動 or 'codex'ラベル時のみ実行

    permissions:
      contents: write
      pull-requests: write
      issues: write    # ← read ではなく write に
      # actions: write は不要なら外してOK

    steps:
      - uses: actions/checkout@v4
        with:
          # フルヒストリーを取得してブランチ作成を確実にする
          fetch-depth: 0

      - name: Debug event context
        run: |
          set -euo pipefail
          echo "EVENT_NAME=${GITHUB_EVENT_NAME}"
          echo "EVENT_PATH=${GITHUB_EVENT_PATH}"
          echo "Label in payload (first occurrence):"
          grep -m1 '"label"\|"name"' "$GITHUB_EVENT_PATH" || true

      - name: Set git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install dependencies
        run: |
          set -euo pipefail
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 2
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 120000
          retry() { n=0; until [ $n -ge 5 ]; do "$@" && break; n=$((n+1)); echo "npm retry $n"; sleep $((n*5)); done; }
          retry npm ci --no-audit --no-fund

      - name: Install Codex CLI
        run: |
          set -euo pipefail
          # OpenAI Codex CLIをインストール（最新版を使用） with retries
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 2
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 120000
          retry() { n=0; until [ $n -ge 5 ]; do npm install -g @openai/codex && break; n=$((n+1)); echo "codex install retry $n"; sleep $((n*5)); done; }
          retry true

      - name: Preflight: Check OpenAI API key and reachability
        id: preflight
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Manual dispatch では Issue 文脈が無いのでスキップ
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "workflow_dispatch detected; skipping Codex execution (diagnostic run)"
            echo "should_skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          ISSUE_NUMBER="${{ github.event.issue.number }}"

          if [ -z "${OPENAI_API_KEY:-}" ]; then
            : > preflight.md
            printf '%s\n' \
              '⚠️ OpenAI API key is not configured (secrets.OPENAI_API_KEY).' \
              '' \
              'このリポジトリの Secrets に OPENAI_API_KEY を設定してください。' \
              '設定後、Issue に `codex` ラベルを再度付与して再実行してください。' \
              > preflight.md
            gh issue comment "${ISSUE_NUMBER}" --body-file preflight.md || true
            echo "should_skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # List(models) は 200 でも、モデル権限が別で落ちる場合がある
          echo 'Probing chat.completions with model=gpt-5-codex...'
          RESP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"model":"gpt-5-codex","messages":[{"role":"user","content":"ping"}],"max_tokens":1}' || true)
          echo "Probe HTTP code: $RESP_CODE"

          if [ "$RESP_CODE" != "200" ]; then
            : > preflight.md
            printf '%s\n' \
              '⚠️ OpenAI API 認証/権限エラー（chat.completions で失敗）' \
              '' \
              "HTTP status: $RESP_CODE" \
              '' \
              '- APIキーが無効/期限切れ/権限不足の可能性' \
              '- 組織側のモデル使用権限（gpt-5-codex）未付与の可能性' \
              '対処: OPENAI_API_KEY とモデル権限を確認して再実行してください。' \
              > preflight.md
            gh issue comment "${ISSUE_NUMBER}" --body-file preflight.md || true
            echo "should_skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "should_skip=false" >> "$GITHUB_OUTPUT"

      # ここを追加／上書き（認証方式=APIキー、モデル=gpt-5-codex）
      - name: Configure Codex (API key mode)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.codex
          cat > ~/.codex/config.toml <<'TOML'
          preferred_auth_method = "apikey"
          model = "gpt-5-codex"
          model_reasoning_effort = "high"
          TOML

      - name: Generate patch with Codex
        if: steps.preflight.outputs.should_skip != 'true'
        id: codex_exec
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CODEX_QUIET_MODE: "1"
        run: |
          set -euo pipefail
          unset OPENAI_BASE_URL || true  # 誤ったベースURLを排除

          git fetch --prune origin
          BASE=origin/main
          BRANCH="codex/issue-${{ github.event.issue.number }}"
          if git ls-remote --exit-code --heads origin "$BRANCH" >/dev/null 2>&1; then
            echo "Remote branch exists. Tracking and rebasing..."
            git switch -C "$BRANCH" --track "origin/$BRANCH"
            git pull --rebase origin "$BRANCH"
          else
            echo "Creating new branch from $BASE"
            git switch -c "$BRANCH" "$BASE"
          fi

          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"

          PROMPT="$(printf '%s\n\n%s\n\n%s\n%s\n%s\n%s' \
            "$ISSUE_TITLE" \
            "$ISSUE_BODY" \
            "最後に 'npm run build && npm test' を実行し、エラーが出ないことを確認してください。.git 等のドットファイル/フォルダは変更しないでください。")"

          codex --version || true
          codex exec --full-auto --model gpt-5-codex --config preferred_auth_method=apikey "$PROMPT" < /dev/null

          if [[ -n $(git status --porcelain) ]]; then
            git add -A
            git commit -m "feat: #${{ github.event.issue.number }} - $ISSUE_TITLE" \
                        -m "Automated implementation by Codex CLI based on issue requirements." \
                        -m "Closes #${{ github.event.issue.number }}"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

          # リモートと乖離が出ても安全に更新
          git push --force-with-lease -u origin "$BRANCH"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request (only if changes)
        if: steps.preflight.outputs.should_skip != 'true' && steps.codex_exec.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH="codex/issue-${{ github.event.issue.number }}"
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"

          # fetch latest base
          git fetch origin main

          AHEAD=$(git rev-list --count origin/main..HEAD)
          if [ "$AHEAD" -eq 0 ]; then
            echo "No commits between origin/main and $BRANCH — skipping PR creation."

            # explain in issue
            : > issue-comment.md
            printf '%s\n' \
              '🤖 自動実装を試行しましたが、リポジトリに変更は見つかりませんでした。' \
              '' \
              'Codex は変更を生成しなかったため、プルリクエストは作成されませんでした。' \
              > issue-comment.md

            gh issue comment ${ISSUE_NUMBER} --body-file issue-comment.md
            # ensure no pr-url.txt is left over
            rm -f pr-url.txt || true
            exit 0
          fi

          # Create PR body file (ensure this file exists before calling gh pr create)
          : > pr-body.md
          printf '%s\n' \
            '## 概要' \
            "このPRは Issue #${ISSUE_NUMBER} の自動実装です。" \
            '' \
            '## 変更内容' \
            '- Codex CLI による自動実装' \
            '- TDD原則に基づく実装' \
            '' \
            '## 関連Issue' \
            "Closes #${ISSUE_NUMBER}" \
            > pr-body.md

          PR_TITLE="feat: #${ISSUE_NUMBER} - ${ISSUE_TITLE}"

          # Create the PR (gh uses GH_TOKEN from env)
          gh pr create --title "$PR_TITLE" --body-file pr-body.md --base main --head "$BRANCH" --label "codex"

          # Get URL of the PR we just created (use gh pr view to query it)
          PR_URL=$(gh pr view --json url --jq '.url')
          echo "PR_URL=${PR_URL}" > pr-url.txt
          echo "Created PR: ${PR_URL}"

      - name: Add comment to issue
        if: steps.preflight.outputs.should_skip != 'true' && steps.codex_exec.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          BRANCH="codex/issue-${ISSUE_NUMBER}"
          
          # コメントをファイルに書き出し（heredocを避けてprintfで生成）
          : > issue-comment.md
          printf '%s\n' \
            '🤖 **自動実装が完了しました！**' \
            '' \
            'Codex CLIによる自動実装が完了し、プルリクエストが作成されました。' \
            '' \
            "- **ブランチ**: \`${BRANCH}\`" \
            '- **実装方針**: TDD + Tidy First原則' \
            '- **次のステップ**: PRレビューをお願いします' \
            '' \
            'レビュー後、問題なければマージしてください。' \
            > issue-comment.md
          
          gh issue comment ${ISSUE_NUMBER} --body-file issue-comment.md

      - name: Add comment to issue (no changes)
        if: steps.preflight.outputs.should_skip != 'true' && steps.codex_exec.outputs.has_changes == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          : > issue-comment.md
          printf '%s\n' \
            '🤖 自動実装を試行しましたが、リポジトリに変更は見つかりませんでした。' \
            '' \
            'Codex は変更を生成しなかったため、プルリクエストは作成されませんでした。' \
            > issue-comment.md
          gh issue comment ${ISSUE_NUMBER} --body-file issue-comment.md
