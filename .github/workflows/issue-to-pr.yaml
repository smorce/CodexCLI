name: Issue to PR with Codex

on:
  issues:
    types: [labeled]

permissions:
  contents: write          # push/branch作成に必要
  pull-requests: write     # PRの作成に必要

jobs:
  fix_with_codex:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'codex' # 'codex'ラベルがついた時のみ実行

    permissions:
      contents: write
      pull-requests: write
      actions: write
      issues: read

    steps:
      - uses: actions/checkout@v4
        with:
          # フルヒストリーを取得してブランチ作成を確実にする
          fetch-depth: 0

      - name: Set git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install dependencies
        run: |
          set -euo pipefail
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 2
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 120000
          retry() { n=0; until [ $n -ge 5 ]; do "$@" && break; n=$((n+1)); echo "npm retry $n"; sleep $((n*5)); done; }
          retry npm ci --no-audit --no-fund

      - name: Install Codex CLI
        run: |
          set -euo pipefail
          # OpenAI Codex CLIをインストール（最新版を使用） with retries
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 2
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 120000
          retry() { n=0; until [ $n -ge 5 ]; do npm install -g @openai/codex && break; n=$((n+1)); echo "codex install retry $n"; sleep $((n*5)); done; }
          retry true

      - name: Preflight: Check OpenAI API key and reachability
        id: preflight
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          ISSUE_NUMBER="${{ github.event.issue.number }}"

          # 1) Check key presence
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            : > preflight.md
            printf '%s\n' \
              '⚠️ OpenAI API key is not configured (secrets.OPENAI_API_KEY).' \
              '' \
              'このリポジトリの Secrets に OPENAI_API_KEY を設定してください。' \
              '設定後、Issue に `codex` ラベルを再度付与して再実行してください。' \
              > preflight.md
            gh issue comment "${ISSUE_NUMBER}" --body-file preflight.md || true
            echo "should_skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 2) Probe OpenAI API
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            https://api.openai.com/v1/models || true)
          echo "OpenAI API probe HTTP code: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ]; then
            : > preflight.md
            printf '%s\n' \
              '⚠️ OpenAI API authentication failed.' \
              '' \
              "HTTP status: $HTTP_CODE" \
              '' \
              '原因: APIキーが無効/権限不足/レート制限/ネットワーク設定' \
              '対処: OPENAI_API_KEY を確認し、必要に応じて再設定してから再実行してください。' \
              > preflight.md
            gh issue comment "${ISSUE_NUMBER}" --body-file preflight.md || true
            echo "should_skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "should_skip=false" >> "$GITHUB_OUTPUT"

      - name: Generate patch with Codex
        if: steps.preflight.outputs.should_skip != 'true'
        id: codex_exec
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CODEX_QUIET_MODE: "1"
        run: |
          set -euo pipefail

          # 1) Avoid using any cached/interactive login so Codex must use OPENAI_API_KEY
          if [ -d "$HOME/.codex" ]; then
            mv "$HOME/.codex" "$HOME/.codex_backup_$(date +%s)" || true
          fi

          # 2) Ensure no custom base URL is leaking from environment (often causes 401 on v0.dev endpoints)
          unset OPENAI_BASE_URL || true

          # 3) Quick diagnostic (DOES NOT PRINT THE KEY) - checks basic auth to OpenAI
          echo "Checking OpenAI API key access to api.openai.com..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            https://api.openai.com/v1/models || true)
          echo "OpenAI API probe HTTP code: $HTTP_CODE"
          # Expect 200; 401 = invalid key, 403 = permission, 429 = rate limit

          # 4) Optional: print Codex version/help for debugging (no secrets)
          codex --version || true

          # 5) Run Codex in CI-safe mode (example)
          BRANCH="codex/issue-${{ github.event.issue.number }}"
          echo "Creating branch: $BRANCH"
          git switch -c "$BRANCH"

          # Issue情報を取得
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # TopTenFrontier プロジェクト用のプロンプトを構築
          PROMPT="$(printf '%s\n\n%s\n\n%s\n%s\n%s\n%s' \
            "$ISSUE_TITLE" \
            "$ISSUE_BODY" \
            "このプロジェクトはマイクロサービスアーキテクチャです。" \
            "TDD（Red-Green-Refactor）とTidy First原則を厳格に遵守してください。" \
            "構造的変更（リファクタリング）と振る舞いの変更（機能追加）は別々のコミットに分離してください。" \
            "最後に 'npm run build && npm test' を実行してエラーが出ないことを確認してください。.gitのような'.'から始まるファイル、フォルダの中身は絶対に変更しないでください。")"
          
          echo "Preparing Codex config (reasoning=high)..."
          mkdir -p ~/.codex
          cat > ~/.codex/config.toml <<'TOML'
          model = "gpt-5"
          model_reasoning_effort = "high"
          TOML

          echo "Executing Codex with prompt..."
          # 非対話環境向けの環境変数を設定
          export CI=true
          export TERM=dumb

          # Codex CLIを実行（フルオート・非対話）
          codex exec --full-auto "$PROMPT" < /dev/null

          # 変更があるかチェック
          if [[ -n $(git status --porcelain) ]]; then
            echo "Changes detected, committing..."
            git add .
            # コミットメッセージをIssue情報から生成
            git commit -m "feat: #${{ github.event.issue.number }} - $ISSUE_TITLE" \
                       -m "Automated implementation by Codex CLI based on issue requirements." \
                       -m "Closes #${{ github.event.issue.number }}"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi
          
          # ブランチをプッシュ
          git push -u origin "$BRANCH"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request (only if changes)
        if: steps.preflight.outputs.should_skip != 'true' && steps.codex_exec.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH="codex/issue-${{ github.event.issue.number }}"
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"

          # fetch latest base
          git fetch origin main

          AHEAD=$(git rev-list --count origin/main..HEAD)
          if [ "$AHEAD" -eq 0 ]; then
            echo "No commits between origin/main and $BRANCH — skipping PR creation."

            # explain in issue
            : > issue-comment.md
            printf '%s\n' \
              '🤖 自動実装を試行しましたが、リポジトリに変更は見つかりませんでした。' \
              '' \
              'Codex は変更を生成しなかったため、プルリクエストは作成されませんでした。' \
              > issue-comment.md

            gh issue comment ${ISSUE_NUMBER} --body-file issue-comment.md
            # ensure no pr-url.txt is left over
            rm -f pr-url.txt || true
            exit 0
          fi

          # Create PR body file (ensure this file exists before calling gh pr create)
          : > pr-body.md
          printf '%s\n' \
            '## 概要' \
            "このPRは Issue #${ISSUE_NUMBER} の自動実装です。" \
            '' \
            '## 変更内容' \
            '- Codex CLI による自動実装' \
            '- TDD原則に基づく実装' \
            '' \
            '## 関連Issue' \
            "Closes #${ISSUE_NUMBER}" \
            > pr-body.md

          PR_TITLE="feat: #${ISSUE_NUMBER} - ${ISSUE_TITLE}"

          # Create the PR (gh uses GH_TOKEN from env)
          gh pr create --title "$PR_TITLE" --body-file pr-body.md --base main --head "$BRANCH" --label "codex"

          # Get URL of the PR we just created (use gh pr view to query it)
          PR_URL=$(gh pr view --json url --jq '.url')
          echo "PR_URL=${PR_URL}" > pr-url.txt
          echo "Created PR: ${PR_URL}"

      - name: Add comment to issue
        if: steps.preflight.outputs.should_skip != 'true' && steps.codex_exec.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          BRANCH="codex/issue-${ISSUE_NUMBER}"
          
          # コメントをファイルに書き出し（heredocを避けてprintfで生成）
          : > issue-comment.md
          printf '%s\n' \
            '🤖 **自動実装が完了しました！**' \
            '' \
            'Codex CLIによる自動実装が完了し、プルリクエストが作成されました。' \
            '' \
            "- **ブランチ**: \`${BRANCH}\`" \
            '- **実装方針**: TDD + Tidy First原則' \
            '- **次のステップ**: PRレビューをお願いします' \
            '' \
            'レビュー後、問題なければマージしてください。' \
            > issue-comment.md
          
          gh issue comment ${ISSUE_NUMBER} --body-file issue-comment.md

      - name: Add comment to issue (no changes)
        if: steps.preflight.outputs.should_skip != 'true' && steps.codex_exec.outputs.has_changes == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          : > issue-comment.md
          printf '%s\n' \
            '🤖 自動実装を試行しましたが、リポジトリに変更は見つかりませんでした。' \
            '' \
            'Codex は変更を生成しなかったため、プルリクエストは作成されませんでした。' \
            > issue-comment.md
          gh issue comment ${ISSUE_NUMBER} --body-file issue-comment.md
